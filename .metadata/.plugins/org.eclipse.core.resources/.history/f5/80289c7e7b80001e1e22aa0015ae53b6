#ifndef __OSKERNEL_H__
#define __OSKERNEL_H__

#include "stm32f4xx.h"

#define STACK_SIZE      400
#define NO_OF_THREADS     1

#define CTRL_ENABLE    (1<<0)
#define CTRL_TICKINT   (1<<1)
#define CTRL_CLCKSRC   (1<<2)
#define CTRL_COUNTFLAG (1<<16)
#define BUS_FREQ       (16000000)
#define SYSTICK_RST    0
#define QUANTA         10
#define ICSR           (*((volatile uint32_t *)0xE000ED04))
#define PENDSTSET      (1<<26)

#define PERIODIC_SCHEDULER_ENABLE 1
#define PERIODIC_SCHEDULER_WITH_HARDWARE_ENABLE 1
#define PERIOD          100

void osKernelStackInit(uint32_t i);
uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void));
void osKernelLaunch(uint32_t quanta);
void osSchedulerLaunch();
void osKernelInit();
void osThreadYield();
#if(PERIODIC_SCHEDULER_ENABLE ==1)
void osPeriodicScheduler();
void task3();
#endif

void osSemaphoreInit(uint32_t *semaphore , uint32_t value);
void osSemaphoreGive(uint32_t *semaphore);
void osSemaphoreWait(uint32_t *semaphore);

#endif
