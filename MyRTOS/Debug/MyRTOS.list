
MyRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005d0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000768  08000770  00010770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000768  08000768  00010770  2**0
                  CONTENTS
  4 .ARM          00000000  08000768  08000768  00010770  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000768  08000770  00010770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000768  08000768  00010768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800076c  0800076c  0001076c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010770  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000000  08000770  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08000770  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010770  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000107a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f1e  00000000  00000000  000107e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004ca  00000000  00000000  00011701  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00011bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d8  00000000  00000000  00011d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f46  00000000  00000000  00011de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001565  00000000  00000000  00012d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00053e32  00000000  00000000  0001428b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000038c  00000000  00000000  000680c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  0006844c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000750 	.word	0x08000750

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000750 	.word	0x08000750

080001d8 <task0>:
typedef uint32_t TaskProfiler;
TaskProfiler Task0_Profiler, Task1_Profiler , Task2_Profiler;

int32_t semaphore1,semaphore2;
void task0()
{
 80001d8:	b480      	push	{r7}
 80001da:	af00      	add	r7, sp, #0
	while(1)
	{
		 Task0_Profiler++;
 80001dc:	4b02      	ldr	r3, [pc, #8]	; (80001e8 <task0+0x10>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	4a01      	ldr	r2, [pc, #4]	; (80001e8 <task0+0x10>)
 80001e4:	6013      	str	r3, [r2, #0]
 80001e6:	e7f9      	b.n	80001dc <task0+0x4>
 80001e8:	2000001c 	.word	0x2000001c

080001ec <task1>:
		// osThreadYield();
	}
}

void task1()
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
	while(1)
	{
		 Task1_Profiler++;
 80001f0:	4b02      	ldr	r3, [pc, #8]	; (80001fc <task1+0x10>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	3301      	adds	r3, #1
 80001f6:	4a01      	ldr	r2, [pc, #4]	; (80001fc <task1+0x10>)
 80001f8:	6013      	str	r3, [r2, #0]
 80001fa:	e7f9      	b.n	80001f0 <task1+0x4>
 80001fc:	20000020 	.word	0x20000020

08000200 <task2>:
//		osSemaphoreGive(&semaphore1);
	}
}

void task2()
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	while(1)
	{
		Task2_Profiler++;
 8000204:	4b02      	ldr	r3, [pc, #8]	; (8000210 <task2+0x10>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	3301      	adds	r3, #1
 800020a:	4a01      	ldr	r2, [pc, #4]	; (8000210 <task2+0x10>)
 800020c:	6013      	str	r3, [r2, #0]
 800020e:	e7f9      	b.n	8000204 <task2+0x4>
 8000210:	20000024 	.word	0x20000024

08000214 <main>:

#if SCHEDULER == SPORADIC_SCHEDULER
int32_t edgeSem;
#endif
int main()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	af00      	add	r7, sp, #0
	#if(SCHEDULER == PERIODIC_SCHEDULER_WITH_HARDWARE)
	time2_1Hz_Interrupt_Init();
	#endif
	usart_init();
 8000218:	f000 f9c4 	bl	80005a4 <usart_init>
	osSemaphoreInit(&semaphore1,1);
 800021c:	2101      	movs	r1, #1
 800021e:	480a      	ldr	r0, [pc, #40]	; (8000248 <main+0x34>)
 8000220:	f000 f9b2 	bl	8000588 <osSemaphoreInit>
	osSemaphoreInit(&semaphore2,0);
 8000224:	2100      	movs	r1, #0
 8000226:	4809      	ldr	r0, [pc, #36]	; (800024c <main+0x38>)
 8000228:	f000 f9ae 	bl	8000588 <osSemaphoreInit>
	osKernelInit();
 800022c:	f000 f94a 	bl	80004c4 <osKernelInit>
	  osKernelAddThread(&prioritySchedulerTask0,5,&prioritySchedulerTask1,1,
			  	  	  	&prioritySchedulerTask2,1,&prioritySchedulerTask3,2,
	                    &prioritySchedulerTask4,5,&prioritySchedulerTask5,1,
						&prioritySchedulerTask6,1,&prioritySchedulerTask7,3);
#else
	osKernelAddThreads(&task0,&task1,&task2);
 8000230:	4a07      	ldr	r2, [pc, #28]	; (8000250 <main+0x3c>)
 8000232:	4908      	ldr	r1, [pc, #32]	; (8000254 <main+0x40>)
 8000234:	4808      	ldr	r0, [pc, #32]	; (8000258 <main+0x44>)
 8000236:	f000 f90b 	bl	8000450 <osKernelAddThreads>
#endif
	osKernelLaunch(QUANTA);
 800023a:	200a      	movs	r0, #10
 800023c:	f000 f950 	bl	80004e0 <osKernelLaunch>
 8000240:	2300      	movs	r3, #0
}
 8000242:	4618      	mov	r0, r3
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	20000028 	.word	0x20000028
 800024c:	2000002c 	.word	0x2000002c
 8000250:	08000201 	.word	0x08000201
 8000254:	080001ed 	.word	0x080001ed
 8000258:	080001d9 	.word	0x080001d9

0800025c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800025c:	b480      	push	{r7}
 800025e:	b083      	sub	sp, #12
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	6039      	str	r1, [r7, #0]
 8000266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026c:	2b00      	cmp	r3, #0
 800026e:	db0a      	blt.n	8000286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	b2da      	uxtb	r2, r3
 8000274:	490c      	ldr	r1, [pc, #48]	; (80002a8 <__NVIC_SetPriority+0x4c>)
 8000276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027a:	0112      	lsls	r2, r2, #4
 800027c:	b2d2      	uxtb	r2, r2
 800027e:	440b      	add	r3, r1
 8000280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000284:	e00a      	b.n	800029c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	b2da      	uxtb	r2, r3
 800028a:	4908      	ldr	r1, [pc, #32]	; (80002ac <__NVIC_SetPriority+0x50>)
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	f003 030f 	and.w	r3, r3, #15
 8000292:	3b04      	subs	r3, #4
 8000294:	0112      	lsls	r2, r2, #4
 8000296:	b2d2      	uxtb	r2, r2
 8000298:	440b      	add	r3, r1
 800029a:	761a      	strb	r2, [r3, #24]
}
 800029c:	bf00      	nop
 800029e:	370c      	adds	r7, #12
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000e100 	.word	0xe000e100
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <osKernelStackInit>:
uint32_t TCB_Stacks[NUM_OF_THREADS][STACK_SIZE];

uint32_t MILLIS_PRESCALER;

void osKernelStackInit(uint32_t i)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  tcbs[i].stackPt=&TCB_Stacks[i][STACK_SIZE-16];    /*stack pointer*/
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80002be:	fb02 f303 	mul.w	r3, r2, r3
 80002c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80002c6:	4a60      	ldr	r2, [pc, #384]	; (8000448 <osKernelStackInit+0x198>)
 80002c8:	441a      	add	r2, r3
 80002ca:	4960      	ldr	r1, [pc, #384]	; (800044c <osKernelStackInit+0x19c>)
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
  /*Set bit 21(T bit) to 1 in PSR to operate in thumb mode*/
  TCB_Stacks[i][STACK_SIZE-1] = (1<<24);            /*PSR*/
 80002d2:	4a5d      	ldr	r2, [pc, #372]	; (8000448 <osKernelStackInit+0x198>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80002da:	fb01 f303 	mul.w	r3, r1, r3
 80002de:	4413      	add	r3, r2
 80002e0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80002e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80002e8:	601a      	str	r2, [r3, #0]

/*We dont have thread function yet so we can initialise PC*/

  /*Block below is option, only for degbuggin purpose*/
  TCB_Stacks[i][STACK_SIZE-3] =0xAAAAAAAA;  /*LR*/
 80002ea:	4a57      	ldr	r2, [pc, #348]	; (8000448 <osKernelStackInit+0x198>)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80002f2:	fb01 f303 	mul.w	r3, r1, r3
 80002f6:	4413      	add	r3, r2
 80002f8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80002fc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000300:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-4] =0xAAAAAAAA;  /*R12*/
 8000302:	4a51      	ldr	r2, [pc, #324]	; (8000448 <osKernelStackInit+0x198>)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800030a:	fb01 f303 	mul.w	r3, r1, r3
 800030e:	4413      	add	r3, r2
 8000310:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8000314:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000318:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-5] =0xAAAAAAAA;  /*R3*/
 800031a:	4a4b      	ldr	r2, [pc, #300]	; (8000448 <osKernelStackInit+0x198>)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000322:	fb01 f303 	mul.w	r3, r1, r3
 8000326:	4413      	add	r3, r2
 8000328:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800032c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000330:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-6] =0xAAAAAAAA;  /*R2*/
 8000332:	4a45      	ldr	r2, [pc, #276]	; (8000448 <osKernelStackInit+0x198>)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800033a:	fb01 f303 	mul.w	r3, r1, r3
 800033e:	4413      	add	r3, r2
 8000340:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000344:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000348:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-7] =0xAAAAAAAA;  /*R1*/
 800034a:	4a3f      	ldr	r2, [pc, #252]	; (8000448 <osKernelStackInit+0x198>)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000352:	fb01 f303 	mul.w	r3, r1, r3
 8000356:	4413      	add	r3, r2
 8000358:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800035c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000360:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-8] =0xAAAAAAAA;  /*R0*/
 8000362:	4a39      	ldr	r2, [pc, #228]	; (8000448 <osKernelStackInit+0x198>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800036a:	fb01 f303 	mul.w	r3, r1, r3
 800036e:	4413      	add	r3, r2
 8000370:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000374:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000378:	601a      	str	r2, [r3, #0]


  TCB_Stacks[i][STACK_SIZE-9] =0xAAAAAAAA;  /*R11*/
 800037a:	4a33      	ldr	r2, [pc, #204]	; (8000448 <osKernelStackInit+0x198>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000382:	fb01 f303 	mul.w	r3, r1, r3
 8000386:	4413      	add	r3, r2
 8000388:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800038c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000390:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-10] =0xAAAAAAAA; /*R10*/
 8000392:	4a2d      	ldr	r2, [pc, #180]	; (8000448 <osKernelStackInit+0x198>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800039a:	fb01 f303 	mul.w	r3, r1, r3
 800039e:	4413      	add	r3, r2
 80003a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80003a4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003a8:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-11] =0xAAAAAAAA; /*R9*/
 80003aa:	4a27      	ldr	r2, [pc, #156]	; (8000448 <osKernelStackInit+0x198>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003b2:	fb01 f303 	mul.w	r3, r1, r3
 80003b6:	4413      	add	r3, r2
 80003b8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80003bc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003c0:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-12] =0xAAAAAAAA; /*R8*/
 80003c2:	4a21      	ldr	r2, [pc, #132]	; (8000448 <osKernelStackInit+0x198>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003ca:	fb01 f303 	mul.w	r3, r1, r3
 80003ce:	4413      	add	r3, r2
 80003d0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80003d4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003d8:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-13] =0xAAAAAAAA; /*R7*/
 80003da:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <osKernelStackInit+0x198>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003e2:	fb01 f303 	mul.w	r3, r1, r3
 80003e6:	4413      	add	r3, r2
 80003e8:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80003ec:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003f0:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-14] =0xAAAAAAAA; /*R6*/
 80003f2:	4a15      	ldr	r2, [pc, #84]	; (8000448 <osKernelStackInit+0x198>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003fa:	fb01 f303 	mul.w	r3, r1, r3
 80003fe:	4413      	add	r3, r2
 8000400:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8000404:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000408:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-15] =0xAAAAAAAA; /*R5*/
 800040a:	4a0f      	ldr	r2, [pc, #60]	; (8000448 <osKernelStackInit+0x198>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000412:	fb01 f303 	mul.w	r3, r1, r3
 8000416:	4413      	add	r3, r2
 8000418:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800041c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000420:	601a      	str	r2, [r3, #0]
  TCB_Stacks[i][STACK_SIZE-16] =0xAAAAAAAA; /*R4*/
 8000422:	4a09      	ldr	r2, [pc, #36]	; (8000448 <osKernelStackInit+0x198>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800042a:	fb01 f303 	mul.w	r3, r1, r3
 800042e:	4413      	add	r3, r2
 8000430:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000434:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000438:	601a      	str	r2, [r3, #0]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	2000004c 	.word	0x2000004c
 800044c:	20000034 	.word	0x20000034

08000450 <osKernelAddThreads>:

uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800045c:	b672      	cpsid	i
}
 800045e:	bf00      	nop
  /*disable global interrup*/
  __disable_irq();
  tcbs[0].nextPt = &tcbs[1].stackPt;
 8000460:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <osKernelAddThreads+0x60>)
 8000462:	4a14      	ldr	r2, [pc, #80]	; (80004b4 <osKernelAddThreads+0x64>)
 8000464:	605a      	str	r2, [r3, #4]
  tcbs[1].nextPt = &tcbs[2].stackPt;
 8000466:	4b12      	ldr	r3, [pc, #72]	; (80004b0 <osKernelAddThreads+0x60>)
 8000468:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <osKernelAddThreads+0x68>)
 800046a:	60da      	str	r2, [r3, #12]
  tcbs[2].nextPt = &tcbs[0].stackPt;
 800046c:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <osKernelAddThreads+0x60>)
 800046e:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <osKernelAddThreads+0x60>)
 8000470:	615a      	str	r2, [r3, #20]

/*initialise thread0*/
  osKernelStackInit(0);
 8000472:	2000      	movs	r0, #0
 8000474:	f7ff ff1c 	bl	80002b0 <osKernelStackInit>
  /*initialise PC*/
  TCB_Stacks[0][STACK_SIZE-2] = (uint32_t)(task0);
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	4a10      	ldr	r2, [pc, #64]	; (80004bc <osKernelAddThreads+0x6c>)
 800047c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188

  osKernelStackInit(1);
 8000480:	2001      	movs	r0, #1
 8000482:	f7ff ff15 	bl	80002b0 <osKernelStackInit>
  TCB_Stacks[1][STACK_SIZE-2] = (uint32_t)(task1);
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <osKernelAddThreads+0x6c>)
 800048a:	f8c2 3318 	str.w	r3, [r2, #792]	; 0x318

  osKernelStackInit(2);
 800048e:	2002      	movs	r0, #2
 8000490:	f7ff ff0e 	bl	80002b0 <osKernelStackInit>
  TCB_Stacks[2][STACK_SIZE-2] = (uint32_t)(task2);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a09      	ldr	r2, [pc, #36]	; (80004bc <osKernelAddThreads+0x6c>)
 8000498:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8

  currentPt = &tcbs[0];
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <osKernelAddThreads+0x70>)
 800049e:	4a04      	ldr	r2, [pc, #16]	; (80004b0 <osKernelAddThreads+0x60>)
 80004a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80004a2:	b662      	cpsie	i
}
 80004a4:	bf00      	nop

  __enable_irq();
  return 1;
 80004a6:	2301      	movs	r3, #1
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000034 	.word	0x20000034
 80004b4:	2000003c 	.word	0x2000003c
 80004b8:	20000044 	.word	0x20000044
 80004bc:	2000004c 	.word	0x2000004c
 80004c0:	20000030 	.word	0x20000030

080004c4 <osKernelInit>:
void osKernelInit()
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  MILLIS_PRESCALER = (BUS_FREQ/1000);
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <osKernelInit+0x18>)
 80004ca:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80004ce:	601a      	str	r2, [r3, #0]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	200004fc 	.word	0x200004fc

080004e0 <osKernelLaunch>:

void osKernelLaunch(uint32_t quanta)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  /*Reset systick*/
  SysTick->CTRL = SYSTICK_RST;
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <osKernelLaunch+0x4c>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	601a      	str	r2, [r3, #0]
  /*clear systick register value */
  SysTick->VAL = 0;
 80004ee:	4b0f      	ldr	r3, [pc, #60]	; (800052c <osKernelLaunch+0x4c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	609a      	str	r2, [r3, #8]
  /*Load quanta*/
  SysTick->LOAD = (quanta*MILLIS_PRESCALER)-1 ;
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <osKernelLaunch+0x50>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	fb02 f303 	mul.w	r3, r2, r3
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <osKernelLaunch+0x4c>)
 8000500:	3b01      	subs	r3, #1
 8000502:	6053      	str	r3, [r2, #4]
  /*set systick to low priority*/
  NVIC_SetPriority(SysTick_IRQn,15);
 8000504:	210f      	movs	r1, #15
 8000506:	f04f 30ff 	mov.w	r0, #4294967295
 800050a:	f7ff fea7 	bl	800025c <__NVIC_SetPriority>
  /*Enable systick , select internal clck*/
  SysTick->CTRL = CTRL_ENABLE| CTRL_CLCKSRC;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <osKernelLaunch+0x4c>)
 8000510:	2205      	movs	r2, #5
 8000512:	601a      	str	r2, [r3, #0]
  /*Enable systick interrupt*/
  SysTick->CTRL |= CTRL_TICKINT;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <osKernelLaunch+0x4c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <osKernelLaunch+0x4c>)
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	6013      	str	r3, [r2, #0]
  /*Launch scheduler*/
  osSchedulerLaunch();
 8000520:	f000 f81a 	bl	8000558 <osSchedulerLaunch>
}
 8000524:	bf00      	nop
 8000526:	3708      	adds	r7, #8
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	e000e010 	.word	0xe000e010
 8000530:	200004fc 	.word	0x200004fc

08000534 <SysTick_Handler>:

__attribute__((naked)) void SysTick_Handler(void)
{
  /*SUSPEND the current thread*/
  /*Disable the global interrupt*/
  __asm("CPSID I");
 8000534:	b672      	cpsid	i
  /*save r4,r5.r6,r7,r8,r9,r10,r11*/
  __asm("PUSH {R4-R11}");
 8000536:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  /*load the address of currentPt in r0, r0 = &currentPt*/
  __asm("LDR R0,=currentPt");
 800053a:	4806      	ldr	r0, [pc, #24]	; (8000554 <SysTick_Handler+0x20>)
  /*load r1 with value at address of r0 i.e. r1=currentPt */
  __asm("LDR R1,[R0]");
 800053c:	6801      	ldr	r1, [r0, #0]
  /*store cotex-m sp at the address of r1 i.e. currentPt->stackPt = SP(save sp into tcb)*/
  __asm("STR SP,[R1]");
 800053e:	f8c1 d000 	str.w	sp, [r1]
#endif

#if (SCHEDULER != PRIORITY_SCHEDULER)
/*choose next thread*/
  /*load r1 with the loaction 4 bytes above the address of r1, i.e. r1= currentPt->nextPt*/
  __asm("LDR R1,[R1,#4]");
 8000542:	6849      	ldr	r1, [r1, #4]
  /*store value of r1 into address pointed by r0 . i.e. currentPt = currentPt->nextPt */
  __asm("STR R1,[R0]");
 8000544:	6001      	str	r1, [r0, #0]
  /*load the cortex -M SP with value at the address point by r1, i.e. SP = (currentPt->stackPt)*/
  __asm("LDR SP,[R1]");
 8000546:	f8d1 d000 	ldr.w	sp, [r1]
  __asm("LDR		R1,[R0]");
  /*SP  = currentPt->StackPt*/
  __asm("LDR		SP,[R1]");
#endif
  /*restore r4,r5.r6,r7,r8,r9,r10,r11*/
  __asm("POP {R4-R11}");
 800054a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    /*enable the global interrupt*/
  __asm("CPSIE I");
 800054e:	b662      	cpsie	i
  /*return from exception and restore r0,r1,r2,r3,r12,lr,pc and psr*/
  __asm("BX LR");
 8000550:	4770      	bx	lr
}
 8000552:	bf00      	nop
 8000554:	20000030 	.word	0x20000030

08000558 <osSchedulerLaunch>:

void osSchedulerLaunch()
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /*load the address of currentPt in r0, r0 = &currentPt*/
  __asm("LDR R0,=currentPt");
 800055c:	4809      	ldr	r0, [pc, #36]	; (8000584 <osSchedulerLaunch+0x2c>)
  /*load value at address pointed by r0 to r2. i.e. r2 = currentPt */
  __asm("LDR R2,[R0]");
 800055e:	6802      	ldr	r2, [r0, #0]
  /*load the cortex -M SP with value at the address point by r2, i.e. SP = (currentPt->stackPt)*/
  __asm("LDR SP,[R2]");
 8000560:	f8d2 d000 	ldr.w	sp, [r2]
  /*restore r4,r5.r6,r7,r8,r9,r10,r11*/
  __asm("POP {R4-R11}");
 8000564:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
  /*restore r12*/
  __asm("POP {R12}");
 8000568:	f85d cb04 	ldr.w	ip, [sp], #4
  /*restore r0,r1,r2,r3*/
  __asm("POP {R0-R3}");
 800056c:	bc0f      	pop	{r0, r1, r2, r3}
  /*skip */
  __asm("ADD SP,SP,#4");
 800056e:	b001      	add	sp, #4
  /*create new start location by poping LR*/
  __asm("POP {LR}");
 8000570:	f85d eb04 	ldr.w	lr, [sp], #4
  /*skip PSR*/
  __asm("ADD SP,SP,#4");
 8000574:	b001      	add	sp, #4
    /*enable the global interrupt*/
  __asm("CPSIE I");
 8000576:	b662      	cpsie	i
  /*return from exception*/
  __asm("BX LR");
 8000578:	4770      	bx	lr
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	20000030 	.word	0x20000030

08000588 <osSemaphoreInit>:
  }
}
#endif

void osSemaphoreInit(int32_t *semaphore , int32_t value)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  *semaphore = value;
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	601a      	str	r2, [r3, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <usart_init>:
#include "usart.h"

void usart_init()
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0

	RCC->AHB1ENR |= (1<<0);
 80005a8:	4b3f      	ldr	r3, [pc, #252]	; (80006a8 <usart_init+0x104>)
 80005aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ac:	4a3e      	ldr	r2, [pc, #248]	; (80006a8 <usart_init+0x104>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER &= ~(1<<4);
 80005b4:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <usart_init+0x108>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a3c      	ldr	r2, [pc, #240]	; (80006ac <usart_init+0x108>)
 80005ba:	f023 0310 	bic.w	r3, r3, #16
 80005be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<5);
 80005c0:	4b3a      	ldr	r3, [pc, #232]	; (80006ac <usart_init+0x108>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a39      	ldr	r2, [pc, #228]	; (80006ac <usart_init+0x108>)
 80005c6:	f043 0320 	orr.w	r3, r3, #32
 80005ca:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1<<8);
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <usart_init+0x108>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	4a36      	ldr	r2, [pc, #216]	; (80006ac <usart_init+0x108>)
 80005d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005d6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<9);
 80005d8:	4b34      	ldr	r3, [pc, #208]	; (80006ac <usart_init+0x108>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	4a33      	ldr	r2, [pc, #204]	; (80006ac <usart_init+0x108>)
 80005de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<10);
 80005e4:	4b31      	ldr	r3, [pc, #196]	; (80006ac <usart_init+0x108>)
 80005e6:	6a1b      	ldr	r3, [r3, #32]
 80005e8:	4a30      	ldr	r2, [pc, #192]	; (80006ac <usart_init+0x108>)
 80005ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<11);
 80005f0:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <usart_init+0x108>)
 80005f2:	6a1b      	ldr	r3, [r3, #32]
 80005f4:	4a2d      	ldr	r2, [pc, #180]	; (80006ac <usart_init+0x108>)
 80005f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005fa:	6213      	str	r3, [r2, #32]
//
//	USART2->CR2 &= ~(1<<12);
//	USART2->CR2 &= ~(1<<13);
//
//	USART2->CR3 &= ~(1<<7);
	RCC->APB1ENR |= (1<<17);
 80005fc:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <usart_init+0x104>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a29      	ldr	r2, [pc, #164]	; (80006a8 <usart_init+0x104>)
 8000602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
	USART2->BRR = (((16000000/(16*115200))<<4) + ((16000000/(16*115200)) & 0x0F));
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <usart_init+0x10c>)
 800060a:	2288      	movs	r2, #136	; 0x88
 800060c:	609a      	str	r2, [r3, #8]

	USART2->CR1 |= (1<<3);
 800060e:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <usart_init+0x10c>)
 8000610:	68db      	ldr	r3, [r3, #12]
 8000612:	4a27      	ldr	r2, [pc, #156]	; (80006b0 <usart_init+0x10c>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |= (1<<13);
 800061a:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <usart_init+0x10c>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	4a24      	ldr	r2, [pc, #144]	; (80006b0 <usart_init+0x10c>)
 8000620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000624:	60d3      	str	r3, [r2, #12]



//	RCC->AHB1ENR |= (1<<0);

	GPIOA->MODER &= ~(1<<6);
 8000626:	4b21      	ldr	r3, [pc, #132]	; (80006ac <usart_init+0x108>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a20      	ldr	r2, [pc, #128]	; (80006ac <usart_init+0x108>)
 800062c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000630:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1<<7);
 8000632:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <usart_init+0x108>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <usart_init+0x108>)
 8000638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063c:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] |= (1<<12);
 800063e:	4b1b      	ldr	r3, [pc, #108]	; (80006ac <usart_init+0x108>)
 8000640:	6a1b      	ldr	r3, [r3, #32]
 8000642:	4a1a      	ldr	r2, [pc, #104]	; (80006ac <usart_init+0x108>)
 8000644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000648:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<13);
 800064a:	4b18      	ldr	r3, [pc, #96]	; (80006ac <usart_init+0x108>)
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <usart_init+0x108>)
 8000650:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000654:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1<<14);
 8000656:	4b15      	ldr	r3, [pc, #84]	; (80006ac <usart_init+0x108>)
 8000658:	6a1b      	ldr	r3, [r3, #32]
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <usart_init+0x108>)
 800065c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000660:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1<<15);
 8000662:	4b12      	ldr	r3, [pc, #72]	; (80006ac <usart_init+0x108>)
 8000664:	6a1b      	ldr	r3, [r3, #32]
 8000666:	4a11      	ldr	r2, [pc, #68]	; (80006ac <usart_init+0x108>)
 8000668:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800066c:	6213      	str	r3, [r2, #32]

//	RCC->APB1ENR |= (1<<17);

//	USART2->CR1 |= (1<<13);
//	USART2->CR1 &= ~(1<<12);
	USART2->CR1 |= (1<<2);
 800066e:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <usart_init+0x10c>)
 8000670:	68db      	ldr	r3, [r3, #12]
 8000672:	4a0f      	ldr	r2, [pc, #60]	; (80006b0 <usart_init+0x10c>)
 8000674:	f043 0304 	orr.w	r3, r3, #4
 8000678:	60d3      	str	r3, [r2, #12]

	USART2->CR2 &= ~(1<<12);
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <usart_init+0x10c>)
 800067c:	691b      	ldr	r3, [r3, #16]
 800067e:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <usart_init+0x10c>)
 8000680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000684:	6113      	str	r3, [r2, #16]
	USART2->CR2 &= ~(1<<13);
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <usart_init+0x10c>)
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <usart_init+0x10c>)
 800068c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000690:	6113      	str	r3, [r2, #16]

//	USART2->BRR = (((16000000/(16*115200))<<4) + ((16000000/(16*115200)) & 0x0F));

	USART2->CR3 &= ~(1<<6);
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <usart_init+0x10c>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a06      	ldr	r2, [pc, #24]	; (80006b0 <usart_init+0x10c>)
 8000698:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800069c:	6153      	str	r3, [r2, #20]
}
 800069e:	bf00      	nop
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40004400 	.word	0x40004400

080006b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b4:	480d      	ldr	r0, [pc, #52]	; (80006ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006bc:	480c      	ldr	r0, [pc, #48]	; (80006f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006be:	490d      	ldr	r1, [pc, #52]	; (80006f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006c0:	4a0d      	ldr	r2, [pc, #52]	; (80006f8 <LoopForever+0xe>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c4:	e002      	b.n	80006cc <LoopCopyDataInit>

080006c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ca:	3304      	adds	r3, #4

080006cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006d0:	d3f9      	bcc.n	80006c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006d2:	4a0a      	ldr	r2, [pc, #40]	; (80006fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d4:	4c0a      	ldr	r4, [pc, #40]	; (8000700 <LoopForever+0x16>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d8:	e001      	b.n	80006de <LoopFillZerobss>

080006da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006dc:	3204      	adds	r2, #4

080006de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006e0:	d3fb      	bcc.n	80006da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006e2:	f000 f811 	bl	8000708 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006e6:	f7ff fd95 	bl	8000214 <main>

080006ea <LoopForever>:

LoopForever:
  b LoopForever
 80006ea:	e7fe      	b.n	80006ea <LoopForever>
  ldr   r0, =_estack
 80006ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006f8:	08000770 	.word	0x08000770
  ldr r2, =_sbss
 80006fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000700:	20000500 	.word	0x20000500

08000704 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC_IRQHandler>
	...

08000708 <__libc_init_array>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	4d0d      	ldr	r5, [pc, #52]	; (8000740 <__libc_init_array+0x38>)
 800070c:	4c0d      	ldr	r4, [pc, #52]	; (8000744 <__libc_init_array+0x3c>)
 800070e:	1b64      	subs	r4, r4, r5
 8000710:	10a4      	asrs	r4, r4, #2
 8000712:	2600      	movs	r6, #0
 8000714:	42a6      	cmp	r6, r4
 8000716:	d109      	bne.n	800072c <__libc_init_array+0x24>
 8000718:	4d0b      	ldr	r5, [pc, #44]	; (8000748 <__libc_init_array+0x40>)
 800071a:	4c0c      	ldr	r4, [pc, #48]	; (800074c <__libc_init_array+0x44>)
 800071c:	f000 f818 	bl	8000750 <_init>
 8000720:	1b64      	subs	r4, r4, r5
 8000722:	10a4      	asrs	r4, r4, #2
 8000724:	2600      	movs	r6, #0
 8000726:	42a6      	cmp	r6, r4
 8000728:	d105      	bne.n	8000736 <__libc_init_array+0x2e>
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000730:	4798      	blx	r3
 8000732:	3601      	adds	r6, #1
 8000734:	e7ee      	b.n	8000714 <__libc_init_array+0xc>
 8000736:	f855 3b04 	ldr.w	r3, [r5], #4
 800073a:	4798      	blx	r3
 800073c:	3601      	adds	r6, #1
 800073e:	e7f2      	b.n	8000726 <__libc_init_array+0x1e>
 8000740:	08000768 	.word	0x08000768
 8000744:	08000768 	.word	0x08000768
 8000748:	08000768 	.word	0x08000768
 800074c:	0800076c 	.word	0x0800076c

08000750 <_init>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	bf00      	nop
 8000754:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000756:	bc08      	pop	{r3}
 8000758:	469e      	mov	lr, r3
 800075a:	4770      	bx	lr

0800075c <_fini>:
 800075c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800075e:	bf00      	nop
 8000760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000762:	bc08      	pop	{r3}
 8000764:	469e      	mov	lr, r3
 8000766:	4770      	bx	lr
